// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ltsrpc.proto

#ifndef PROTOBUF_INCLUDED_ltsrpc_2eproto
#define PROTOBUF_INCLUDED_ltsrpc_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ltsrpc_2eproto 

namespace protobuf_ltsrpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ltsrpc_2eproto
namespace ltsrpc {
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class GetMembersRequest;
class GetMembersRequestDefaultTypeInternal;
extern GetMembersRequestDefaultTypeInternal _GetMembersRequest_default_instance_;
class GetMembersResponse;
class GetMembersResponseDefaultTypeInternal;
extern GetMembersResponseDefaultTypeInternal _GetMembersResponse_default_instance_;
class GetTxnTimestampCtx;
class GetTxnTimestampCtxDefaultTypeInternal;
extern GetTxnTimestampCtxDefaultTypeInternal _GetTxnTimestampCtx_default_instance_;
class Member;
class MemberDefaultTypeInternal;
extern MemberDefaultTypeInternal _Member_default_instance_;
class RequestHeader;
class RequestHeaderDefaultTypeInternal;
extern RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
class ResponseHeader;
class ResponseHeaderDefaultTypeInternal;
extern ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace ltsrpc
namespace google {
namespace protobuf {
template<> ::ltsrpc::Cluster* Arena::CreateMaybeMessage<::ltsrpc::Cluster>(Arena*);
template<> ::ltsrpc::GetMembersRequest* Arena::CreateMaybeMessage<::ltsrpc::GetMembersRequest>(Arena*);
template<> ::ltsrpc::GetMembersResponse* Arena::CreateMaybeMessage<::ltsrpc::GetMembersResponse>(Arena*);
template<> ::ltsrpc::GetTxnTimestampCtx* Arena::CreateMaybeMessage<::ltsrpc::GetTxnTimestampCtx>(Arena*);
template<> ::ltsrpc::Member* Arena::CreateMaybeMessage<::ltsrpc::Member>(Arena*);
template<> ::ltsrpc::RequestHeader* Arena::CreateMaybeMessage<::ltsrpc::RequestHeader>(Arena*);
template<> ::ltsrpc::ResponseHeader* Arena::CreateMaybeMessage<::ltsrpc::ResponseHeader>(Arena*);
template<> ::ltsrpc::Status* Arena::CreateMaybeMessage<::ltsrpc::Status>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ltsrpc {

enum StatusCode {
  SC_OK = 0,
  SC_ERROR = 1,
  SC_UNKNOWN = 2,
  SC_NOT_LEADER = 3,
  SC_NOT_EXISTS = 4,
  SC_CANCEL = 5,
  SC_RESOURCE_EXHAUSTED = 6,
  SC_ABORTED = 7,
  SC_LEADER_NOT_FOUND = 8,
  StatusCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatusCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = SC_OK;
const StatusCode StatusCode_MAX = SC_LEADER_NOT_FOUND;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class Cluster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ltsrpc.Cluster) */ {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cluster(Cluster&& from) noexcept
    : Cluster() {
    *this = ::std::move(from);
  }

  inline Cluster& operator=(Cluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Cluster* other);
  friend void swap(Cluster& a, Cluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cluster* New() const final {
    return CreateMaybeMessage<Cluster>(NULL);
  }

  Cluster* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Cluster>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 cluster_id = 1;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  ::google::protobuf::uint32 cluster_id() const;
  void set_cluster_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ltsrpc.Cluster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 cluster_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ltsrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ltsrpc.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Status* other);
  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(NULL);
  }

  Status* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 2;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // .ltsrpc.StatusCode code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::ltsrpc::StatusCode code() const;
  void set_code(::ltsrpc::StatusCode value);

  // @@protoc_insertion_point(class_scope:ltsrpc.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  int code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ltsrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Member : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ltsrpc.Member) */ {
 public:
  Member();
  virtual ~Member();

  Member(const Member& from);

  inline Member& operator=(const Member& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Member(Member&& from) noexcept
    : Member() {
    *this = ::std::move(from);
  }

  inline Member& operator=(Member&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Member& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Member* internal_default_instance() {
    return reinterpret_cast<const Member*>(
               &_Member_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Member* other);
  friend void swap(Member& a, Member& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Member* New() const final {
    return CreateMaybeMessage<Member>(NULL);
  }

  Member* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Member>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Member& from);
  void MergeFrom(const Member& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Member* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string peer_urls = 3;
  int peer_urls_size() const;
  void clear_peer_urls();
  static const int kPeerUrlsFieldNumber = 3;
  const ::std::string& peer_urls(int index) const;
  ::std::string* mutable_peer_urls(int index);
  void set_peer_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_peer_urls(int index, ::std::string&& value);
  #endif
  void set_peer_urls(int index, const char* value);
  void set_peer_urls(int index, const char* value, size_t size);
  ::std::string* add_peer_urls();
  void add_peer_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_peer_urls(::std::string&& value);
  #endif
  void add_peer_urls(const char* value);
  void add_peer_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& peer_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_peer_urls();

  // repeated string client_urls = 4;
  int client_urls_size() const;
  void clear_client_urls();
  static const int kClientUrlsFieldNumber = 4;
  const ::std::string& client_urls(int index) const;
  ::std::string* mutable_client_urls(int index);
  void set_client_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_client_urls(int index, ::std::string&& value);
  #endif
  void set_client_urls(int index, const char* value);
  void set_client_urls(int index, const char* value, size_t size);
  ::std::string* add_client_urls();
  void add_client_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_client_urls(::std::string&& value);
  #endif
  void add_client_urls(const char* value);
  void add_client_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& client_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_client_urls();

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint64 member_id = 1;
  void clear_member_id();
  static const int kMemberIdFieldNumber = 1;
  ::google::protobuf::uint64 member_id() const;
  void set_member_id(::google::protobuf::uint64 value);

  // int32 leader_priority = 5;
  void clear_leader_priority();
  static const int kLeaderPriorityFieldNumber = 5;
  ::google::protobuf::int32 leader_priority() const;
  void set_leader_priority(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ltsrpc.Member)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> peer_urls_;
  ::google::protobuf::RepeatedPtrField< ::std::string> client_urls_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 member_id_;
  ::google::protobuf::int32 leader_priority_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ltsrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ltsrpc.RequestHeader) */ {
 public:
  RequestHeader();
  virtual ~RequestHeader();

  RequestHeader(const RequestHeader& from);

  inline RequestHeader& operator=(const RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestHeader(RequestHeader&& from) noexcept
    : RequestHeader() {
    *this = ::std::move(from);
  }

  inline RequestHeader& operator=(RequestHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestHeader* internal_default_instance() {
    return reinterpret_cast<const RequestHeader*>(
               &_RequestHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RequestHeader* other);
  friend void swap(RequestHeader& a, RequestHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestHeader* New() const final {
    return CreateMaybeMessage<RequestHeader>(NULL);
  }

  RequestHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestHeader& from);
  void MergeFrom(const RequestHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 cluster_id = 1;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  ::google::protobuf::uint32 cluster_id() const;
  void set_cluster_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ltsrpc.RequestHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 cluster_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ltsrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ResponseHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ltsrpc.ResponseHeader) */ {
 public:
  ResponseHeader();
  virtual ~ResponseHeader();

  ResponseHeader(const ResponseHeader& from);

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseHeader(ResponseHeader&& from) noexcept
    : ResponseHeader() {
    *this = ::std::move(from);
  }

  inline ResponseHeader& operator=(ResponseHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseHeader* internal_default_instance() {
    return reinterpret_cast<const ResponseHeader*>(
               &_ResponseHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ResponseHeader* other);
  friend void swap(ResponseHeader& a, ResponseHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseHeader* New() const final {
    return CreateMaybeMessage<ResponseHeader>(NULL);
  }

  ResponseHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResponseHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResponseHeader& from);
  void MergeFrom(const ResponseHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ltsrpc.Status status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  private:
  const ::ltsrpc::Status& _internal_status() const;
  public:
  const ::ltsrpc::Status& status() const;
  ::ltsrpc::Status* release_status();
  ::ltsrpc::Status* mutable_status();
  void set_allocated_status(::ltsrpc::Status* status);

  // uint32 cluster_id = 1;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 1;
  ::google::protobuf::uint32 cluster_id() const;
  void set_cluster_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ltsrpc.ResponseHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ltsrpc::Status* status_;
  ::google::protobuf::uint32 cluster_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ltsrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMembersRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ltsrpc.GetMembersRequest) */ {
 public:
  GetMembersRequest();
  virtual ~GetMembersRequest();

  GetMembersRequest(const GetMembersRequest& from);

  inline GetMembersRequest& operator=(const GetMembersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMembersRequest(GetMembersRequest&& from) noexcept
    : GetMembersRequest() {
    *this = ::std::move(from);
  }

  inline GetMembersRequest& operator=(GetMembersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMembersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMembersRequest* internal_default_instance() {
    return reinterpret_cast<const GetMembersRequest*>(
               &_GetMembersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(GetMembersRequest* other);
  friend void swap(GetMembersRequest& a, GetMembersRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMembersRequest* New() const final {
    return CreateMaybeMessage<GetMembersRequest>(NULL);
  }

  GetMembersRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMembersRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMembersRequest& from);
  void MergeFrom(const GetMembersRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMembersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ltsrpc.RequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ltsrpc::RequestHeader& _internal_header() const;
  public:
  const ::ltsrpc::RequestHeader& header() const;
  ::ltsrpc::RequestHeader* release_header();
  ::ltsrpc::RequestHeader* mutable_header();
  void set_allocated_header(::ltsrpc::RequestHeader* header);

  // @@protoc_insertion_point(class_scope:ltsrpc.GetMembersRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ltsrpc::RequestHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ltsrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetMembersResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ltsrpc.GetMembersResponse) */ {
 public:
  GetMembersResponse();
  virtual ~GetMembersResponse();

  GetMembersResponse(const GetMembersResponse& from);

  inline GetMembersResponse& operator=(const GetMembersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetMembersResponse(GetMembersResponse&& from) noexcept
    : GetMembersResponse() {
    *this = ::std::move(from);
  }

  inline GetMembersResponse& operator=(GetMembersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetMembersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMembersResponse* internal_default_instance() {
    return reinterpret_cast<const GetMembersResponse*>(
               &_GetMembersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetMembersResponse* other);
  friend void swap(GetMembersResponse& a, GetMembersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetMembersResponse* New() const final {
    return CreateMaybeMessage<GetMembersResponse>(NULL);
  }

  GetMembersResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetMembersResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetMembersResponse& from);
  void MergeFrom(const GetMembersResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMembersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ltsrpc.Member members = 2;
  int members_size() const;
  void clear_members();
  static const int kMembersFieldNumber = 2;
  ::ltsrpc::Member* mutable_members(int index);
  ::google::protobuf::RepeatedPtrField< ::ltsrpc::Member >*
      mutable_members();
  const ::ltsrpc::Member& members(int index) const;
  ::ltsrpc::Member* add_members();
  const ::google::protobuf::RepeatedPtrField< ::ltsrpc::Member >&
      members() const;

  // .ltsrpc.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::ltsrpc::ResponseHeader& _internal_header() const;
  public:
  const ::ltsrpc::ResponseHeader& header() const;
  ::ltsrpc::ResponseHeader* release_header();
  ::ltsrpc::ResponseHeader* mutable_header();
  void set_allocated_header(::ltsrpc::ResponseHeader* header);

  // .ltsrpc.Member leader = 3;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 3;
  private:
  const ::ltsrpc::Member& _internal_leader() const;
  public:
  const ::ltsrpc::Member& leader() const;
  ::ltsrpc::Member* release_leader();
  ::ltsrpc::Member* mutable_leader();
  void set_allocated_leader(::ltsrpc::Member* leader);

  // .ltsrpc.Member etcd_leader = 4;
  bool has_etcd_leader() const;
  void clear_etcd_leader();
  static const int kEtcdLeaderFieldNumber = 4;
  private:
  const ::ltsrpc::Member& _internal_etcd_leader() const;
  public:
  const ::ltsrpc::Member& etcd_leader() const;
  ::ltsrpc::Member* release_etcd_leader();
  ::ltsrpc::Member* mutable_etcd_leader();
  void set_allocated_etcd_leader(::ltsrpc::Member* etcd_leader);

  // @@protoc_insertion_point(class_scope:ltsrpc.GetMembersResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ltsrpc::Member > members_;
  ::ltsrpc::ResponseHeader* header_;
  ::ltsrpc::Member* leader_;
  ::ltsrpc::Member* etcd_leader_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ltsrpc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTxnTimestampCtx : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ltsrpc.GetTxnTimestampCtx) */ {
 public:
  GetTxnTimestampCtx();
  virtual ~GetTxnTimestampCtx();

  GetTxnTimestampCtx(const GetTxnTimestampCtx& from);

  inline GetTxnTimestampCtx& operator=(const GetTxnTimestampCtx& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTxnTimestampCtx(GetTxnTimestampCtx&& from) noexcept
    : GetTxnTimestampCtx() {
    *this = ::std::move(from);
  }

  inline GetTxnTimestampCtx& operator=(GetTxnTimestampCtx&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTxnTimestampCtx& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTxnTimestampCtx* internal_default_instance() {
    return reinterpret_cast<const GetTxnTimestampCtx*>(
               &_GetTxnTimestampCtx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetTxnTimestampCtx* other);
  friend void swap(GetTxnTimestampCtx& a, GetTxnTimestampCtx& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTxnTimestampCtx* New() const final {
    return CreateMaybeMessage<GetTxnTimestampCtx>(NULL);
  }

  GetTxnTimestampCtx* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTxnTimestampCtx>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTxnTimestampCtx& from);
  void MergeFrom(const GetTxnTimestampCtx& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTxnTimestampCtx* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 txn_id = 1;
  void clear_txn_id();
  static const int kTxnIdFieldNumber = 1;
  ::google::protobuf::uint64 txn_id() const;
  void set_txn_id(::google::protobuf::uint64 value);

  // uint64 txn_ts = 2;
  void clear_txn_ts();
  static const int kTxnTsFieldNumber = 2;
  ::google::protobuf::uint64 txn_ts() const;
  void set_txn_ts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ltsrpc.GetTxnTimestampCtx)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 txn_id_;
  ::google::protobuf::uint64 txn_ts_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_ltsrpc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Cluster

// uint32 cluster_id = 1;
inline void Cluster::clear_cluster_id() {
  cluster_id_ = 0u;
}
inline ::google::protobuf::uint32 Cluster::cluster_id() const {
  // @@protoc_insertion_point(field_get:ltsrpc.Cluster.cluster_id)
  return cluster_id_;
}
inline void Cluster::set_cluster_id(::google::protobuf::uint32 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ltsrpc.Cluster.cluster_id)
}

// -------------------------------------------------------------------

// Status

// .ltsrpc.StatusCode code = 1;
inline void Status::clear_code() {
  code_ = 0;
}
inline ::ltsrpc::StatusCode Status::code() const {
  // @@protoc_insertion_point(field_get:ltsrpc.Status.code)
  return static_cast< ::ltsrpc::StatusCode >(code_);
}
inline void Status::set_code(::ltsrpc::StatusCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:ltsrpc.Status.code)
}

// string msg = 2;
inline void Status::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::msg() const {
  // @@protoc_insertion_point(field_get:ltsrpc.Status.msg)
  return msg_.GetNoArena();
}
inline void Status::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ltsrpc.Status.msg)
}
#if LANG_CXX11
inline void Status::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ltsrpc.Status.msg)
}
#endif
inline void Status::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ltsrpc.Status.msg)
}
inline void Status::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ltsrpc.Status.msg)
}
inline ::std::string* Status::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:ltsrpc.Status.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_msg() {
  // @@protoc_insertion_point(field_release:ltsrpc.Status.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:ltsrpc.Status.msg)
}

// -------------------------------------------------------------------

// Member

// uint64 member_id = 1;
inline void Member::clear_member_id() {
  member_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Member::member_id() const {
  // @@protoc_insertion_point(field_get:ltsrpc.Member.member_id)
  return member_id_;
}
inline void Member::set_member_id(::google::protobuf::uint64 value) {
  
  member_id_ = value;
  // @@protoc_insertion_point(field_set:ltsrpc.Member.member_id)
}

// string name = 2;
inline void Member::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Member::name() const {
  // @@protoc_insertion_point(field_get:ltsrpc.Member.name)
  return name_.GetNoArena();
}
inline void Member::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ltsrpc.Member.name)
}
#if LANG_CXX11
inline void Member::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ltsrpc.Member.name)
}
#endif
inline void Member::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ltsrpc.Member.name)
}
inline void Member::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ltsrpc.Member.name)
}
inline ::std::string* Member::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ltsrpc.Member.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Member::release_name() {
  // @@protoc_insertion_point(field_release:ltsrpc.Member.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Member::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ltsrpc.Member.name)
}

// repeated string peer_urls = 3;
inline int Member::peer_urls_size() const {
  return peer_urls_.size();
}
inline void Member::clear_peer_urls() {
  peer_urls_.Clear();
}
inline const ::std::string& Member::peer_urls(int index) const {
  // @@protoc_insertion_point(field_get:ltsrpc.Member.peer_urls)
  return peer_urls_.Get(index);
}
inline ::std::string* Member::mutable_peer_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ltsrpc.Member.peer_urls)
  return peer_urls_.Mutable(index);
}
inline void Member::set_peer_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ltsrpc.Member.peer_urls)
  peer_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Member::set_peer_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ltsrpc.Member.peer_urls)
  peer_urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Member::set_peer_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peer_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ltsrpc.Member.peer_urls)
}
inline void Member::set_peer_urls(int index, const char* value, size_t size) {
  peer_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ltsrpc.Member.peer_urls)
}
inline ::std::string* Member::add_peer_urls() {
  // @@protoc_insertion_point(field_add_mutable:ltsrpc.Member.peer_urls)
  return peer_urls_.Add();
}
inline void Member::add_peer_urls(const ::std::string& value) {
  peer_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ltsrpc.Member.peer_urls)
}
#if LANG_CXX11
inline void Member::add_peer_urls(::std::string&& value) {
  peer_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ltsrpc.Member.peer_urls)
}
#endif
inline void Member::add_peer_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  peer_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ltsrpc.Member.peer_urls)
}
inline void Member::add_peer_urls(const char* value, size_t size) {
  peer_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ltsrpc.Member.peer_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Member::peer_urls() const {
  // @@protoc_insertion_point(field_list:ltsrpc.Member.peer_urls)
  return peer_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Member::mutable_peer_urls() {
  // @@protoc_insertion_point(field_mutable_list:ltsrpc.Member.peer_urls)
  return &peer_urls_;
}

// repeated string client_urls = 4;
inline int Member::client_urls_size() const {
  return client_urls_.size();
}
inline void Member::clear_client_urls() {
  client_urls_.Clear();
}
inline const ::std::string& Member::client_urls(int index) const {
  // @@protoc_insertion_point(field_get:ltsrpc.Member.client_urls)
  return client_urls_.Get(index);
}
inline ::std::string* Member::mutable_client_urls(int index) {
  // @@protoc_insertion_point(field_mutable:ltsrpc.Member.client_urls)
  return client_urls_.Mutable(index);
}
inline void Member::set_client_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ltsrpc.Member.client_urls)
  client_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Member::set_client_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ltsrpc.Member.client_urls)
  client_urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Member::set_client_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  client_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ltsrpc.Member.client_urls)
}
inline void Member::set_client_urls(int index, const char* value, size_t size) {
  client_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ltsrpc.Member.client_urls)
}
inline ::std::string* Member::add_client_urls() {
  // @@protoc_insertion_point(field_add_mutable:ltsrpc.Member.client_urls)
  return client_urls_.Add();
}
inline void Member::add_client_urls(const ::std::string& value) {
  client_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ltsrpc.Member.client_urls)
}
#if LANG_CXX11
inline void Member::add_client_urls(::std::string&& value) {
  client_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ltsrpc.Member.client_urls)
}
#endif
inline void Member::add_client_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  client_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ltsrpc.Member.client_urls)
}
inline void Member::add_client_urls(const char* value, size_t size) {
  client_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ltsrpc.Member.client_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Member::client_urls() const {
  // @@protoc_insertion_point(field_list:ltsrpc.Member.client_urls)
  return client_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Member::mutable_client_urls() {
  // @@protoc_insertion_point(field_mutable_list:ltsrpc.Member.client_urls)
  return &client_urls_;
}

// int32 leader_priority = 5;
inline void Member::clear_leader_priority() {
  leader_priority_ = 0;
}
inline ::google::protobuf::int32 Member::leader_priority() const {
  // @@protoc_insertion_point(field_get:ltsrpc.Member.leader_priority)
  return leader_priority_;
}
inline void Member::set_leader_priority(::google::protobuf::int32 value) {
  
  leader_priority_ = value;
  // @@protoc_insertion_point(field_set:ltsrpc.Member.leader_priority)
}

// -------------------------------------------------------------------

// RequestHeader

// uint32 cluster_id = 1;
inline void RequestHeader::clear_cluster_id() {
  cluster_id_ = 0u;
}
inline ::google::protobuf::uint32 RequestHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:ltsrpc.RequestHeader.cluster_id)
  return cluster_id_;
}
inline void RequestHeader::set_cluster_id(::google::protobuf::uint32 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ltsrpc.RequestHeader.cluster_id)
}

// -------------------------------------------------------------------

// ResponseHeader

// uint32 cluster_id = 1;
inline void ResponseHeader::clear_cluster_id() {
  cluster_id_ = 0u;
}
inline ::google::protobuf::uint32 ResponseHeader::cluster_id() const {
  // @@protoc_insertion_point(field_get:ltsrpc.ResponseHeader.cluster_id)
  return cluster_id_;
}
inline void ResponseHeader::set_cluster_id(::google::protobuf::uint32 value) {
  
  cluster_id_ = value;
  // @@protoc_insertion_point(field_set:ltsrpc.ResponseHeader.cluster_id)
}

// .ltsrpc.Status status = 2;
inline bool ResponseHeader::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void ResponseHeader::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
}
inline const ::ltsrpc::Status& ResponseHeader::_internal_status() const {
  return *status_;
}
inline const ::ltsrpc::Status& ResponseHeader::status() const {
  const ::ltsrpc::Status* p = status_;
  // @@protoc_insertion_point(field_get:ltsrpc.ResponseHeader.status)
  return p != NULL ? *p : *reinterpret_cast<const ::ltsrpc::Status*>(
      &::ltsrpc::_Status_default_instance_);
}
inline ::ltsrpc::Status* ResponseHeader::release_status() {
  // @@protoc_insertion_point(field_release:ltsrpc.ResponseHeader.status)
  
  ::ltsrpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::ltsrpc::Status* ResponseHeader::mutable_status() {
  
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::ltsrpc::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ltsrpc.ResponseHeader.status)
  return status_;
}
inline void ResponseHeader::set_allocated_status(::ltsrpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete status_;
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:ltsrpc.ResponseHeader.status)
}

// -------------------------------------------------------------------

// GetMembersRequest

// .ltsrpc.RequestHeader header = 1;
inline bool GetMembersRequest::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void GetMembersRequest::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::ltsrpc::RequestHeader& GetMembersRequest::_internal_header() const {
  return *header_;
}
inline const ::ltsrpc::RequestHeader& GetMembersRequest::header() const {
  const ::ltsrpc::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:ltsrpc.GetMembersRequest.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ltsrpc::RequestHeader*>(
      &::ltsrpc::_RequestHeader_default_instance_);
}
inline ::ltsrpc::RequestHeader* GetMembersRequest::release_header() {
  // @@protoc_insertion_point(field_release:ltsrpc.GetMembersRequest.header)
  
  ::ltsrpc::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ltsrpc::RequestHeader* GetMembersRequest::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ltsrpc::RequestHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ltsrpc.GetMembersRequest.header)
  return header_;
}
inline void GetMembersRequest::set_allocated_header(::ltsrpc::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ltsrpc.GetMembersRequest.header)
}

// -------------------------------------------------------------------

// GetMembersResponse

// .ltsrpc.ResponseHeader header = 1;
inline bool GetMembersResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void GetMembersResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::ltsrpc::ResponseHeader& GetMembersResponse::_internal_header() const {
  return *header_;
}
inline const ::ltsrpc::ResponseHeader& GetMembersResponse::header() const {
  const ::ltsrpc::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:ltsrpc.GetMembersResponse.header)
  return p != NULL ? *p : *reinterpret_cast<const ::ltsrpc::ResponseHeader*>(
      &::ltsrpc::_ResponseHeader_default_instance_);
}
inline ::ltsrpc::ResponseHeader* GetMembersResponse::release_header() {
  // @@protoc_insertion_point(field_release:ltsrpc.GetMembersResponse.header)
  
  ::ltsrpc::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::ltsrpc::ResponseHeader* GetMembersResponse::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::ltsrpc::ResponseHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ltsrpc.GetMembersResponse.header)
  return header_;
}
inline void GetMembersResponse::set_allocated_header(::ltsrpc::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:ltsrpc.GetMembersResponse.header)
}

// repeated .ltsrpc.Member members = 2;
inline int GetMembersResponse::members_size() const {
  return members_.size();
}
inline void GetMembersResponse::clear_members() {
  members_.Clear();
}
inline ::ltsrpc::Member* GetMembersResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:ltsrpc.GetMembersResponse.members)
  return members_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ltsrpc::Member >*
GetMembersResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:ltsrpc.GetMembersResponse.members)
  return &members_;
}
inline const ::ltsrpc::Member& GetMembersResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:ltsrpc.GetMembersResponse.members)
  return members_.Get(index);
}
inline ::ltsrpc::Member* GetMembersResponse::add_members() {
  // @@protoc_insertion_point(field_add:ltsrpc.GetMembersResponse.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ltsrpc::Member >&
GetMembersResponse::members() const {
  // @@protoc_insertion_point(field_list:ltsrpc.GetMembersResponse.members)
  return members_;
}

// .ltsrpc.Member leader = 3;
inline bool GetMembersResponse::has_leader() const {
  return this != internal_default_instance() && leader_ != NULL;
}
inline void GetMembersResponse::clear_leader() {
  if (GetArenaNoVirtual() == NULL && leader_ != NULL) {
    delete leader_;
  }
  leader_ = NULL;
}
inline const ::ltsrpc::Member& GetMembersResponse::_internal_leader() const {
  return *leader_;
}
inline const ::ltsrpc::Member& GetMembersResponse::leader() const {
  const ::ltsrpc::Member* p = leader_;
  // @@protoc_insertion_point(field_get:ltsrpc.GetMembersResponse.leader)
  return p != NULL ? *p : *reinterpret_cast<const ::ltsrpc::Member*>(
      &::ltsrpc::_Member_default_instance_);
}
inline ::ltsrpc::Member* GetMembersResponse::release_leader() {
  // @@protoc_insertion_point(field_release:ltsrpc.GetMembersResponse.leader)
  
  ::ltsrpc::Member* temp = leader_;
  leader_ = NULL;
  return temp;
}
inline ::ltsrpc::Member* GetMembersResponse::mutable_leader() {
  
  if (leader_ == NULL) {
    auto* p = CreateMaybeMessage<::ltsrpc::Member>(GetArenaNoVirtual());
    leader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ltsrpc.GetMembersResponse.leader)
  return leader_;
}
inline void GetMembersResponse::set_allocated_leader(::ltsrpc::Member* leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leader_;
  }
  if (leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leader, submessage_arena);
    }
    
  } else {
    
  }
  leader_ = leader;
  // @@protoc_insertion_point(field_set_allocated:ltsrpc.GetMembersResponse.leader)
}

// .ltsrpc.Member etcd_leader = 4;
inline bool GetMembersResponse::has_etcd_leader() const {
  return this != internal_default_instance() && etcd_leader_ != NULL;
}
inline void GetMembersResponse::clear_etcd_leader() {
  if (GetArenaNoVirtual() == NULL && etcd_leader_ != NULL) {
    delete etcd_leader_;
  }
  etcd_leader_ = NULL;
}
inline const ::ltsrpc::Member& GetMembersResponse::_internal_etcd_leader() const {
  return *etcd_leader_;
}
inline const ::ltsrpc::Member& GetMembersResponse::etcd_leader() const {
  const ::ltsrpc::Member* p = etcd_leader_;
  // @@protoc_insertion_point(field_get:ltsrpc.GetMembersResponse.etcd_leader)
  return p != NULL ? *p : *reinterpret_cast<const ::ltsrpc::Member*>(
      &::ltsrpc::_Member_default_instance_);
}
inline ::ltsrpc::Member* GetMembersResponse::release_etcd_leader() {
  // @@protoc_insertion_point(field_release:ltsrpc.GetMembersResponse.etcd_leader)
  
  ::ltsrpc::Member* temp = etcd_leader_;
  etcd_leader_ = NULL;
  return temp;
}
inline ::ltsrpc::Member* GetMembersResponse::mutable_etcd_leader() {
  
  if (etcd_leader_ == NULL) {
    auto* p = CreateMaybeMessage<::ltsrpc::Member>(GetArenaNoVirtual());
    etcd_leader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ltsrpc.GetMembersResponse.etcd_leader)
  return etcd_leader_;
}
inline void GetMembersResponse::set_allocated_etcd_leader(::ltsrpc::Member* etcd_leader) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete etcd_leader_;
  }
  if (etcd_leader) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      etcd_leader = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, etcd_leader, submessage_arena);
    }
    
  } else {
    
  }
  etcd_leader_ = etcd_leader;
  // @@protoc_insertion_point(field_set_allocated:ltsrpc.GetMembersResponse.etcd_leader)
}

// -------------------------------------------------------------------

// GetTxnTimestampCtx

// uint64 txn_id = 1;
inline void GetTxnTimestampCtx::clear_txn_id() {
  txn_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetTxnTimestampCtx::txn_id() const {
  // @@protoc_insertion_point(field_get:ltsrpc.GetTxnTimestampCtx.txn_id)
  return txn_id_;
}
inline void GetTxnTimestampCtx::set_txn_id(::google::protobuf::uint64 value) {
  
  txn_id_ = value;
  // @@protoc_insertion_point(field_set:ltsrpc.GetTxnTimestampCtx.txn_id)
}

// uint64 txn_ts = 2;
inline void GetTxnTimestampCtx::clear_txn_ts() {
  txn_ts_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GetTxnTimestampCtx::txn_ts() const {
  // @@protoc_insertion_point(field_get:ltsrpc.GetTxnTimestampCtx.txn_ts)
  return txn_ts_;
}
inline void GetTxnTimestampCtx::set_txn_ts(::google::protobuf::uint64 value) {
  
  txn_ts_ = value;
  // @@protoc_insertion_point(field_set:ltsrpc.GetTxnTimestampCtx.txn_ts)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ltsrpc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ltsrpc::StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ltsrpc::StatusCode>() {
  return ::ltsrpc::StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ltsrpc_2eproto
